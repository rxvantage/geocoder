{"version":3,"file":"geocode.command.js","sourceRoot":"","sources":["../../../src/command/geocode.command.ts"],"names":[],"mappings":";;;AAAA,4CAA2D;AAC3D,oCAAwC;AAGxC,2EAAsE;AAEtE,MAAa,cAAsE,SAAQ,mDAI1F;IACG,MAAM,CAAC,UAAU;QACb,OAAO,oBAAY,CAAC;IACxB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,MAAM,SAAS,GAAe,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEzD,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;QAEhD,OAAO,SAAS,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,wBAAwB,CAAC,KAA4B,EAAE,SAAqB;QAChF,IAAI,CAAC,KAAK,CAAC,UAAU,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACxC,OAAO;SACV;QAED,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;YACtB,MAAM,IAAI,uCAA2B,CAAC,sBAAsB,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;SACvF;QAED,MAAM,QAAQ,GAAa,SAAS,CAAC,CAAC,CAAC,CAAC;QAExC,IAAI,CAAC,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,WAAW,KAAK,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,KAAK,QAAQ,CAAC,SAAS,CAAC,EAAE;YAClI,MAAM,IAAI,uCAA2B,CAAC,uCAAuC,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;SACvG;IACL,CAAC;CACJ;AAnCD,wCAmCC","sourcesContent":["import { ExactMatchNotFoundException } from '../exception';\nimport { GeocodeQuery } from '../model';\nimport type { GeocodeQueryInterface } from '../interface';\nimport type { Location } from '../model';\nimport { AbstractLocationCommand } from './abstract-location.command';\n\nexport class GeocodeCommand<ProviderRequestType = any, ProviderResponseType = any> extends AbstractLocationCommand<\n    GeocodeQueryInterface,\n    ProviderRequestType,\n    ProviderResponseType\n> {\n    static queryClass(): typeof GeocodeQuery {\n        return GeocodeQuery;\n    }\n\n    async execute(query: GeocodeQueryInterface): Promise<Location[]> {\n        const locations: Location[] = await super.execute(query);\n\n        this.validateExactMatchOption(query, locations);\n\n        return locations;\n    }\n\n    /**\n     * @throws {ExactMatchNotFoundException}\n     */\n    private validateExactMatchOption(query: GeocodeQueryInterface, locations: Location[]): void {\n        if (!query.exactMatch || !locations.length) {\n            return;\n        }\n\n        if (locations.length > 1) {\n            throw new ExactMatchNotFoundException('More than one result', { query, locations });\n        }\n\n        const location: Location = locations[0];\n\n        if ((query.countryCode && query.countryCode !== location.countryCode) || (query.stateCode && query.stateCode !== location.stateCode)) {\n            throw new ExactMatchNotFoundException('Does not match the terms of the query', { query, location });\n        }\n    }\n}\n"]}