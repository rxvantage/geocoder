{"version":3,"file":"providable.mixin.js","sourceRoot":"","sources":["../../../src/model/providable.mixin.ts"],"names":[],"mappings":";;;AAAA,4CAA8D;AAM9D,SAAgB,eAAe,CAA+C,IAAW;IACrF,OAAO,KAAM,SAAQ,IAAI;QAGrB,YAAY,GAAG,IAAW;YACtB,KAAK,EAAE,CAAC;YAHK,cAAS,GAAuB,EAAE,CAAC;YAKhD,MAAM,CAAC,SAAS,CAAC,GAAyB,IAAW,CAAC;YAEtD,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;gBACnB,MAAM,0CAA8B,CAAC,oBAAoB,EAAE,CAAC;aAC/D;YAED,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACtC,CAAC;QAED,gBAAgB;YACZ,OAAO,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;QAClC,CAAC;QAED,YAAY;YACR,OAAO,IAAI,CAAC,SAAS,CAAC;QAC1B,CAAC;QAED,gBAAgB,CAAC,QAA0B;YACvC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YAE9B,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,iBAAiB,CAAC,SAA6B;YAC3C,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBAC9B,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;aACnC;YAED,OAAO,IAAI,CAAC;QAChB,CAAC;QAED,SAAS,CAAC,MAAuB;YAC7B,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YACxB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;gBACxC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;aAC9B;YAED,OAAO,IAAI,CAAC;QAChB,CAAC;KACJ,CAAC;AACN,CAAC;AA/CD,0CA+CC","sourcesContent":["import { ProviderNotRegisteredException } from '../exception';\nimport type { LoggableInterface, LoggerInterface } from '../logger';\nimport type { Constructor } from '../types';\nimport type { AbstractProvider } from './abstract-provider';\nimport type { ProvidableInterface } from './providable.interface';\n\nexport function ProvidableMixin<TBase extends Constructor<LoggableInterface>>(Base: TBase): TBase & Constructor<ProvidableInterface> {\n    return class extends Base {\n        private readonly providers: AbstractProvider[] = [];\n\n        constructor(...args: any[]) {\n            super();\n\n            const [providers]: [AbstractProvider[]] = args as any;\n\n            if (!providers.length) {\n                throw ProviderNotRegisteredException.noProviderRegistered();\n            }\n\n            this.registerProviders(providers);\n        }\n\n        getFirstProvider(): AbstractProvider {\n            return this.getProviders()[0];\n        }\n\n        getProviders(): AbstractProvider[] {\n            return this.providers;\n        }\n\n        registerProvider(provider: AbstractProvider): this {\n            this.providers.push(provider);\n\n            return this;\n        }\n\n        registerProviders(providers: AbstractProvider[]): this {\n            for (const provider of providers) {\n                this.registerProvider(provider);\n            }\n\n            return this;\n        }\n\n        setLogger(logger: LoggerInterface): this {\n            super.setLogger(logger);\n            for (const provider of this.getProviders()) {\n                provider.setLogger(logger);\n            }\n\n            return this;\n        }\n    };\n}\n"]}