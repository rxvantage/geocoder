{"version":3,"file":"provider-aggregator.js","sourceRoot":"","sources":["../../../src/geocoder/provider-aggregator.ts"],"names":[],"mappings":";;;AAAA,wCAA8C;AAI9C,2DAAuD;AAEvD,MAAa,kBAAmB,SAAQ,oCAAgB;IAGpD,YAAY,SAA6B,EAAE,OAAyB;QAChE,KAAK,CAAC,SAAS,CAAC,CAAC;QAEjB,IAAI,CAAC,OAAO,GAAG,OAAO,IAAI,IAAI,0BAAgB,EAAE,CAAC;IACrD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,MAAM,QAAQ,GAAqB,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEvF,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,MAAM,QAAQ,GAAqB,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEvF,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,MAAM,QAAQ,GAAqB,MAAM,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;QAEvF,OAAO,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACnD,CAAC;CACJ;AA1BD,gDA0BC","sourcesContent":["import { StatelessDecider } from '../decider';\nimport type { AbstractDecider } from '../decider';\nimport type { GeocodeQueryInterface, ReverseQueryInterface, SuggestQueryInterface } from '../interface';\nimport type { AbstractProvider, Location, Suggestion } from '../model';\nimport { AbstractGeocoder } from './abstract-geocoder';\n\nexport class ProviderAggregator extends AbstractGeocoder {\n    private readonly decider: AbstractDecider;\n\n    constructor(providers: AbstractProvider[], decider?: AbstractDecider) {\n        super(providers);\n\n        this.decider = decider || new StatelessDecider();\n    }\n\n    async geocode(query: GeocodeQueryInterface): Promise<Location[]> {\n        const provider: AbstractProvider = await this.decider.getProvider(this.getProviders());\n\n        return this.geocodeByProvider(provider, query);\n    }\n\n    async reverse(query: ReverseQueryInterface): Promise<Location[]> {\n        const provider: AbstractProvider = await this.decider.getProvider(this.getProviders());\n\n        return this.reverseByProvider(provider, query);\n    }\n\n    async suggest(query: SuggestQueryInterface): Promise<Suggestion[]> {\n        const provider: AbstractProvider = await this.decider.getProvider(this.getProviders());\n\n        return this.suggestByProvider(provider, query);\n    }\n}\n"]}