{"version":3,"file":"world-country-util.js","sourceRoot":"","sources":["../../../../src/util/world-country/world-country-util.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAoD;AACpD,qDAAmD;AACnD,6GAAsE;AAEtE,mDAA+C;AAC/C,+DAA0D;AAG1D,MAAa,gBAAgB;IACzB;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,OAAqB,EAAE,OAA0B;;QAClE,MAAM,IAAI,GAAmC,MAAM,CAAC,IAAI,CAAC,OAAO,CAA8C,CAAC;QAE/G,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB,MAAM,WAAW,GAAY,MAAA,OAAO,CAAC,GAAG,CAAC,0CAAE,QAAQ,GAAG,WAAW,EAAE,CAAC;YAEpE,IAAI,GAAG,KAAK,MAAM,EAAE;gBAChB,oDAAoD;gBACpD,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,WAAW,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,KAAK,WAAW,EAAE;oBAC1G,OAAO,IAAI,CAAC;iBACf;aACJ;iBAAM,IAAI,CAAA,MAAA,OAAO,CAAC,GAAG,CAAC,0CAAE,QAAQ,GAAG,WAAW,EAAE,MAAK,WAAW,EAAE;gBAC/D,OAAO,IAAI,CAAC;aACf;SACJ;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAkC;QAChD,MAAM,KAAK,GAAsB,IAAA,mCAAe,EAAgD,uCAAiB,EAAE,MAAM,CAAC,CAAC;QAC3H,MAAM,IAAI,GAA4C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAuD,CAAC;QAE/H,+BAA+B;QAC/B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACb,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;aACrB;SACJ;QAED,IAAI;YACA,MAAM,IAAA,kCAAgB,EAAC,KAAK,EAAE;gBAC1B,SAAS,EAAE,IAAI;gBACf,oBAAoB,EAAE,IAAI;gBAC1B,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;aACnD,CAAC,CAAC;SACN;QAAC,OAAO,GAAQ,EAAE;YACf,OAAO;SACV;QAED,MAAM,WAAW,GAAyB,kCAAkC,CAAC,IAAI,CAAC,CAAC,YAAqB,EAAE,EAAE;YACxG,MAAM,OAAO,GAAiB,IAAA,mCAAe,EAAwB,4BAAY,EAAE,YAAY,CAAC,CAAC;YAEjG,OAAO,gBAAgB,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,WAAW,EAAE;YACd,OAAO;SACV;QAED,OAAO,IAAA,mCAAe,EAAwB,4BAAY,EAAE,WAAW,CAAC,CAAC;IAC7E,CAAC;CACJ;AAxDD,4CAwDC","sourcesContent":["import { plainToInstance } from 'class-transformer';\nimport { validateOrReject } from 'class-validator';\nimport countries from 'world-countries/dist/countries-unescaped.json';\nimport type { Countries, Country } from 'world-countries';\nimport { WorldCountry } from './world-country';\nimport { WorldCountryQuery } from './world-country-query';\nimport type { WorldCountryQueryInterface } from './world-country-query.interface';\n\nexport class WorldCountryUtil {\n    /**\n     * Returns the result if at least one of the fields matches\n     */\n    private static match(country: WorldCountry, filters: WorldCountryQuery): boolean {\n        const keys: Array<keyof WorldCountryQuery> = Object.keys(filters) as unknown as Array<keyof WorldCountryQuery>;\n\n        for (const key of keys) {\n            const searchValue: unknown = filters[key]?.toString().toLowerCase();\n\n            if (key === 'name') {\n                // TODO add search by `country.name.native` property\n                if (country.name.common.toLowerCase() === searchValue || country.name.official.toLowerCase() === searchValue) {\n                    return true;\n                }\n            } else if (country[key]?.toString().toLowerCase() === searchValue) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    static async find(_query: WorldCountryQueryInterface): Promise<WorldCountry | undefined> {\n        const query: WorldCountryQuery = plainToInstance<WorldCountryQuery, WorldCountryQueryInterface>(WorldCountryQuery, _query);\n        const keys: Array<keyof WorldCountryQueryInterface> = Object.keys(query) as unknown as Array<keyof WorldCountryQueryInterface>;\n\n        // clear undefined/empty values\n        for (const key of keys) {\n            if (!query[key]) {\n                delete query[key];\n            }\n        }\n\n        try {\n            await validateOrReject(query, {\n                whitelist: true,\n                forbidNonWhitelisted: true,\n                validationError: { target: false, value: false },\n            });\n        } catch (err: any) {\n            return;\n        }\n\n        const countryData: Country | undefined = (countries as unknown as Countries).find((plainCountry: Country) => {\n            const country: WorldCountry = plainToInstance<WorldCountry, Country>(WorldCountry, plainCountry);\n\n            return WorldCountryUtil.match(country, query);\n        });\n\n        if (!countryData) {\n            return;\n        }\n\n        return plainToInstance<WorldCountry, Country>(WorldCountry, countryData);\n    }\n}\n"]}