{"version":3,"file":"world-country-state-util.js","sourceRoot":"","sources":["../../../../src/util/world-country-state/world-country-state-util.ts"],"names":[],"mappings":";;;;;;AAAA,yDAAoD;AACpD,qDAAmD;AACnD,wGAA0E;AAC1E,+DAA0D;AAC1D,2EAAqE;AAIrE,MAAa,qBAAqB;IAC9B;;OAEG;IACK,MAAM,CAAC,KAAK,CAAC,KAAwB,EAAE,OAA+B;QAC1E,IACI,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,WAAW,CAAC,WAAW,EAAE;YACrE,CAAC,CAAC,OAAO,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,SAAS,CAAC,WAAW,EAAE,CAAC;gBACrF,CAAC,OAAO,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAChF;YACE,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAuC;QACrD,MAAM,KAAK,GAA2B,IAAA,mCAAe,EAA0D,kDAAsB,EAAE,MAAM,CAAC,CAAC;QAC/I,MAAM,IAAI,GAAwC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAmD,CAAC;QAEvH,+BAA+B;QAC/B,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE;gBACb,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;aACrB;SACJ;QAED,IAAI;YACA,MAAM,IAAA,kCAAgB,EAAC,KAAK,EAAE;gBAC1B,SAAS,EAAE,IAAI;gBACf,oBAAoB,EAAE,IAAI;gBAC1B,eAAe,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;aACnD,CAAC,CAAC;SACN;QAAC,OAAO,GAAQ,EAAE;YACf,OAAO;SACV;QAED,MAAM,SAAS,GAA4C,6BAA8C,CAAC,IAAI,CAC1G,CAAC,UAAsC,EAAE,EAAE;YACvC,MAAM,KAAK,GAAsB,IAAA,mCAAe,EAAgD,uCAAiB,EAAE,UAAU,CAAC,CAAC;YAE/H,OAAO,qBAAqB,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC,CACJ,CAAC;QAEF,IAAI,CAAC,SAAS,EAAE;YACZ,OAAO;SACV;QAED,OAAO,IAAA,mCAAe,EAAgD,uCAAiB,EAAE,SAAS,CAAC,CAAC;IACxG,CAAC;CACJ;AAnDD,sDAmDC","sourcesContent":["import { plainToInstance } from 'class-transformer';\nimport { validateOrReject } from 'class-validator';\nimport countryStates from '../../data/country-states/country-states.json';\nimport { WorldCountryState } from './world-country-state';\nimport { WorldCountryStateQuery } from './world-country-state-query';\nimport type { WorldCountryStateQueryInterface } from './world-country-state-query.interface';\nimport type { WorldCountryStateInterface } from './world-country-state.interface';\n\nexport class WorldCountryStateUtil {\n    /**\n     * Returns result only if all fields matched\n     */\n    private static match(state: WorldCountryState, filters: WorldCountryStateQuery): boolean {\n        if (\n            state.countryCode.toLowerCase() === filters.countryCode.toLowerCase() &&\n            ((filters.stateCode && state.stateCode.toLowerCase() === filters.stateCode.toLowerCase()) ||\n                (filters.name && state.name.toLowerCase() === filters.name.toLowerCase()))\n        ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    static async find(_query: WorldCountryStateQueryInterface): Promise<WorldCountryState | undefined> {\n        const query: WorldCountryStateQuery = plainToInstance<WorldCountryStateQuery, WorldCountryStateQueryInterface>(WorldCountryStateQuery, _query);\n        const keys: Array<keyof WorldCountryStateQuery> = Object.keys(query) as unknown as Array<keyof WorldCountryStateQuery>;\n\n        // clear undefined/empty values\n        for (const key of keys) {\n            if (!query[key]) {\n                delete query[key];\n            }\n        }\n\n        try {\n            await validateOrReject(query, {\n                whitelist: true,\n                forbidNonWhitelisted: true,\n                validationError: { target: false, value: false },\n            });\n        } catch (err: any) {\n            return;\n        }\n\n        const stateData: WorldCountryStateInterface | undefined = (countryStates as WorldCountryStateInterface[]).find(\n            (plainState: WorldCountryStateInterface) => {\n                const state: WorldCountryState = plainToInstance<WorldCountryState, WorldCountryStateInterface>(WorldCountryState, plainState);\n\n                return WorldCountryStateUtil.match(state, query);\n            },\n        );\n\n        if (!stateData) {\n            return;\n        }\n\n        return plainToInstance<WorldCountryState, WorldCountryStateInterface>(WorldCountryState, stateData);\n    }\n}\n"]}