{"version":3,"file":"here-location-command.mixin.js","sourceRoot":"","sources":["../../../../../../src/provider/here/command/mixin/here-location-command.mixin.ts"],"names":[],"mappings":";;;AAAA,kEAAkE;AAMlE,2EAAqE;AAErE,SAAgB,wBAAwB,CAA6C,IAAW;IAC5F,MAAe,mBAAoB,SAAQ,IAAA,kDAAsB,EAAC,IAAI,CAAC;QAIzD,KAAK,CAAC,UAAU,CAAC,KAAmB;YAC1C,MAAM,MAAM,GAA8B;gBACtC,MAAM,EAAE,IAAI,CAAC,KAAK;gBAClB,QAAQ,EAAE,IAAI,CAAC,OAAO;gBACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ;gBACxB,UAAU,EAAE,KAAK,CAAC,OAAO;gBACzB,UAAU,EAAE,KAAK,CAAC,KAAK;gBACvB,GAAG,EAAE,CAAC;gBACN,cAAc,EAAE,mCAAmC;aACtD,CAAC;YAEF,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE;gBACxC,MAAM,CAAC,IAAI,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,MAAM,EAAE,CAAC;aAC7D;YAED,IAAI,KAAK,CAAC,UAAU,EAAE;gBAClB,MAAM,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;aACxC;YAED,IAAI,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,EAAE;gBACpC,MAAM,OAAO,GAA6B,MAAM,gCAAgB,CAAC,IAAI,CAAC;oBAClE,IAAI,EAAE,KAAK,CAAC,OAAO;oBACnB,IAAI,EAAE,KAAK,CAAC,WAAW;iBAC1B,CAAC,CAAC;gBAEH;;;mBAGG;gBACH,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC;gBAE7E,IAAI,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,EAAE;oBAChC,wDAAwD;oBACxD,MAAM,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC;iBACjD;gBAED,IAAI,KAAK,CAAC,IAAI,EAAE;oBACZ,MAAM,CAAC,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;iBAC5B;aACJ;YAED,OAAO,MAAM,CAAC;QAClB,CAAC;KACJ;IAED,OAAO,mBAAmB,CAAC;AAC/B,CAAC;AAnDD,4DAmDC","sourcesContent":["import { WorldCountryUtil } from '../../../../util/world-country';\nimport type { AbstractCommand } from '../../../../command';\nimport type { GeocodeQuery } from '../../../../model';\nimport type { Constructor } from '../../../../types';\nimport type { WorldCountry } from '../../../../util/world-country';\nimport type { HereGeocodeQueryInterface } from '../../interface';\nimport { HereCommonCommandMixin } from './here-common-command.mixin';\n\nexport function HereLocationCommandMixin<TBase extends Constructor<AbstractCommand>>(Base: TBase): TBase {\n    abstract class HereLocationCommand extends HereCommonCommandMixin(Base) {\n        protected readonly appId: string;\n        protected readonly appCode: string;\n\n        protected async buildQuery(query: GeocodeQuery): Promise<HereGeocodeQueryInterface> {\n            const params: HereGeocodeQueryInterface = {\n                app_id: this.appId,\n                app_code: this.appCode,\n                language: query.language,\n                searchtext: query.address,\n                maxresults: query.limit,\n                gen: 9,\n                additionaldata: 'Country2,true;NormalizeNames,true',\n            };\n\n            if (query.lat && query.lon && query.radius) {\n                params.prox = `${query.lat},${query.lon},${query.radius}`;\n            }\n\n            if (query.postalCode) {\n                params.postalcode = query.postalCode;\n            }\n\n            if (query.countryCode || query.country) {\n                const country: WorldCountry | undefined = await WorldCountryUtil.find({\n                    name: query.country,\n                    cca2: query.countryCode,\n                });\n\n                /**\n                 * To avoid ambiguity we recommend to specify the country with the 3-letter ISO code and not with the spelled out country name.\n                 * With names there is a higher risk of misspells and also not all language translations for all countries are supported.\n                 */\n                params.country = country ? country.cca3 : query.countryCode || query.country;\n\n                if (query.stateCode || query.state) {\n                    /** Specify state using full or abbreviated notation. */\n                    params.state = query.stateCode || query.state;\n                }\n\n                if (query.city) {\n                    params.city = query.city;\n                }\n            }\n\n            return params;\n        }\n    }\n\n    return HereLocationCommand;\n}\n"]}