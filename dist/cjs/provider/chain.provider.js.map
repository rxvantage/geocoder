{"version":3,"file":"chain.provider.js","sourceRoot":"","sources":["../../../src/provider/chain.provider.ts"],"names":[],"mappings":";;;AAAA,4CAAmD;AACnD,oCAAiD;AAIjD,MAAa,aAAc,SAAQ,6BAAqB;IACpD,YAAY,SAAiC;QACzC,KAAK,CAAC,SAAS,CAAC,CAAC;IACrB,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACxC,IAAI;gBACA,MAAM,SAAS,GAAe,MAAM,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAE5D,IAAI,SAAS,CAAC,MAAM,EAAE;oBAClB,OAAO,SAAS,CAAC;iBACpB;aACJ;YAAC,OAAO,GAAQ,EAAE;gBACf,IAAI,GAAG,YAAY,+BAAmB,EAAE;oBACpC,MAAM,GAAG,CAAC;iBACb;gBAED,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC9B;SACJ;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACxC,IAAI;gBACA,MAAM,SAAS,GAAe,MAAM,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAE5D,IAAI,SAAS,CAAC,MAAM,EAAE;oBAClB,OAAO,SAAS,CAAC;iBACpB;aACJ;YAAC,OAAO,GAAQ,EAAE;gBACf,IAAI,GAAG,YAAY,+BAAmB,EAAE;oBACpC,MAAM,GAAG,CAAC;iBACb;gBAED,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC9B;SACJ;QAED,OAAO,EAAE,CAAC;IACd,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;YACxC,IAAI;gBACA,OAAO,MAAM,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aACxC;YAAC,OAAO,GAAQ,EAAE;gBACf,IAAI,GAAG,YAAY,+BAAmB,EAAE;oBACpC,MAAM,GAAG,CAAC;iBACb;gBAED,IAAI,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aAC9B;SACJ;QAED,OAAO,EAAE,CAAC;IACd,CAAC;CACJ;AA5DD,sCA4DC","sourcesContent":["import { ValidationException } from '../exception';\nimport { AbstractChainProvider } from '../model';\nimport type { GeocodeQueryInterface, ReverseQueryInterface, SuggestQueryInterface } from '../interface';\nimport type { AbstractHttpProvider, Location, Suggestion } from '../model';\n\nexport class ChainProvider extends AbstractChainProvider {\n    constructor(providers: AbstractHttpProvider[]) {\n        super(providers);\n    }\n\n    async geocode(query: GeocodeQueryInterface): Promise<Location[]> {\n        for (const provider of this.getProviders()) {\n            try {\n                const locations: Location[] = await provider.geocode(query);\n\n                if (locations.length) {\n                    return locations;\n                }\n            } catch (err: any) {\n                if (err instanceof ValidationException) {\n                    throw err;\n                }\n\n                this.getLogger().warn(err);\n            }\n        }\n\n        return [];\n    }\n\n    async reverse(query: ReverseQueryInterface): Promise<Location[]> {\n        for (const provider of this.getProviders()) {\n            try {\n                const locations: Location[] = await provider.reverse(query);\n\n                if (locations.length) {\n                    return locations;\n                }\n            } catch (err: any) {\n                if (err instanceof ValidationException) {\n                    throw err;\n                }\n\n                this.getLogger().warn(err);\n            }\n        }\n\n        return [];\n    }\n\n    async suggest(query: SuggestQueryInterface): Promise<Suggestion[]> {\n        for (const provider of this.getProviders()) {\n            try {\n                return await provider.suggest(query);\n            } catch (err: any) {\n                if (err instanceof ValidationException) {\n                    throw err;\n                }\n\n                this.getLogger().warn(err);\n            }\n        }\n\n        return [];\n    }\n}\n"]}