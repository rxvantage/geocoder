{"version":3,"file":"google-maps-distance.command.js","sourceRoot":"","sources":["../../../../../src/provider/google-maps/command/google-maps-distance.command.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport { GoogleMapsDistanceTransformer } from '../transformer';\nimport { TravelModeEnum } from '../../../model';\nimport { InvalidArgumentException, InvalidServerResponseException, NotFoundException, QuotaExceededException } from '../../../exception';\nimport { DistanceCommand } from '../../../command';\nimport type { DistanceQueryInterface } from '../../../interface';\nimport type { DistanceQuery } from '../../../model/distance-query';\nimport type { AbstractDistanceTransformer } from '../../../transformer';\nimport type { GoogleMapsProvider } from '../google-maps.provider';\nimport type { GoogleMapsDistanceQueryInterface } from '../interface';\nimport { GoogleMapsCommonCommandMixin } from './mixin';\n\n/**\n * @link {https://developers.google.com/places/web-service/autocomplete#place_autocomplete_requests}\n */\nexport class GoogleMapsDistanceCommand extends GoogleMapsCommonCommandMixin(DistanceCommand)<GoogleMapsDistanceQueryInterface> {\n    constructor(httpClient: AxiosInstance, private readonly apiKey: string) {\n        super(httpClient, apiKey);\n    }\n\n    static getUrl(): string {\n        return 'https://maps.googleapis.com/maps/api/distancematrix/json';\n    }\n\n    protected async buildQuery(query: DistanceQuery): Promise<GoogleMapsDistanceQueryInterface> {\n        const providerQuery: GoogleMapsDistanceQueryInterface = {\n            key: this.apiKey,\n            origins: `${query.from.lat},${query.from.lon}`,\n            destinations: `${query.to.lat},${query.to.lon}`,\n            language: query.language,\n            mode: this.getRequestMode(query.mode),\n        };\n\n        if (query.countryCode) {\n            providerQuery.region = `.${query.countryCode.toLowerCase()}`;\n        }\n\n        return providerQuery;\n    }\n\n    protected async parseResponse(response: AxiosResponse, _query: DistanceQueryInterface): Promise<AbstractDistanceTransformer<GoogleMapsProvider>[]> {\n        const result: Record<string, any> = response.data.rows[0].elements[0];\n\n        return [new GoogleMapsDistanceTransformer(result)];\n    }\n\n    private getRequestMode(mode?: TravelModeEnum): GoogleMapsDistanceQueryInterface['mode'] {\n        switch (mode) {\n            case TravelModeEnum.WALKING:\n                return 'walking';\n            case TravelModeEnum.BICYCLING:\n                return 'bicycling';\n            case TravelModeEnum.DRIVING:\n                return 'driving';\n            default:\n                return 'driving';\n        }\n    }\n\n    /**\n     * @link {https://developers.google.com/maps/documentation/distance-matrix/overview#element-level-status-codes}\n     */\n    protected async validateResponse(response: AxiosResponse): Promise<void> {\n        switch (response.data.status) {\n            case 'MAX_DIMENSIONS_EXCEEDED':\n                throw new QuotaExceededException('The number of origins or destinations exceeds the per-query limit', response);\n            case 'MAX_ELEMENTS_EXCEEDED':\n                throw new QuotaExceededException('The product of origins and destinations exceeds the per-query limit', response);\n            default:\n                await super.validateResponse(response);\n        }\n\n        if (\n            !Array.isArray(response.data.rows) ||\n            !response.data.rows[0] ||\n            !Array.isArray(response.data.rows[0].elements) ||\n            !response.data.rows[0].elements[0]\n        ) {\n            throw new NotFoundException(`Not found`, response);\n        }\n\n        const result: Record<string, any> = response.data.rows[0].elements[0];\n\n        switch (result.status) {\n            case 'OK':\n                return;\n            case 'NOT_FOUND':\n            case 'ZERO_RESULTS':\n                throw new NotFoundException('Not found', response);\n            case 'MAX_ROUTE_LENGTH_EXCEEDED':\n                throw new InvalidArgumentException('Invalid request', response);\n            default:\n                throw new InvalidServerResponseException(`Unknown response status \"${result.status}\"`, response);\n        }\n    }\n}\n"]}