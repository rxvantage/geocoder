{"version":3,"file":"google-maps-common-command.mixin.js","sourceRoot":"","sources":["../../../../../../src/provider/google-maps/command/mixin/google-maps-common-command.mixin.ts"],"names":[],"mappings":";;;AACA,qDAM+B;AAC/B,6CAAiD;AAIjD,SAAgB,4BAA4B,CAA6C,IAAW;IAChG,MAAe,uBAAwB,SAAQ,IAAI;QAG/C,YAAsB,GAAG,IAAW;YAChC,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,GAA4B,IAAW,CAAC;YAElE,KAAK,CAAC,UAAU,CAAC,CAAC;YAElB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YAErB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;gBACd,MAAM,IAAI,uCAA2B,CAAC,6BAA6B,CAAC,CAAC;aACxE;QACL,CAAC;QAED,MAAM,CAAC,cAAc;YACjB,OAAO,oBAAY,CAAC,YAAY,CAAC;QACrC,CAAC;QAED;;;WAGG;QACO,KAAK,CAAC,gBAAgB,CAAC,QAAuB;YACpD,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,IAAI,EAAE;gBAC/B,OAAO;aACV;YAED,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,WAAW,EAAE;gBACtC,MAAM,IAAI,6BAAiB,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;aACtD;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,gBAAgB,IAAI,QAAQ,CAAC,IAAI,CAAC,aAAa,KAAK,kCAAkC,EAAE;gBACxH,MAAM,IAAI,uCAA2B,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;aACzE;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,gBAAgB,EAAE;gBAClD,MAAM,IAAI,0CAA8B,CAAC,oBAAoB,EAAE,QAAQ,CAAC,CAAC;aAC5E;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,kBAAkB,EAAE;gBACpD,MAAM,IAAI,kCAAsB,CAAC,gBAAgB,EAAE,QAAQ,CAAC,CAAC;aAChE;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,kBAAkB,EAAE;gBACpD;;mBAEG;gBACH,MAAM,IAAI,kCAAsB,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;aACtE;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,iBAAiB,EAAE;gBACnD,MAAM,IAAI,oCAAwB,CAAC,iBAAiB,EAAE,QAAQ,CAAC,CAAC;aACnE;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,eAAe,EAAE;gBACjD,MAAM,IAAI,0CAA8B,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;aACvE;iBAAM,IAAI,QAAQ,CAAC,IAAI,CAAC,MAAM,KAAK,cAAc,EAAE;gBAChD,OAAO;aACV;YAED,MAAM,IAAI,0CAA8B,CAAC,4BAA4B,QAAQ,CAAC,IAAI,CAAC,MAAM,GAAG,EAAE,QAAQ,CAAC,CAAC;QAC5G,CAAC;KACJ;IAED,OAAO,uBAAuB,CAAC;AACnC,CAAC;AAvDD,oEAuDC","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n    InvalidArgumentException,\n    InvalidCredentialsException,\n    InvalidServerResponseException,\n    NotFoundException,\n    QuotaExceededException,\n} from '../../../../exception';\nimport { AccuracyEnum } from '../../../../model';\nimport type { AbstractCommand } from '../../../../command';\nimport type { Constructor } from '../../../../types';\n\nexport function GoogleMapsCommonCommandMixin<TBase extends Constructor<AbstractCommand>>(Base: TBase): TBase {\n    abstract class GoogleMapsCommonCommand extends Base {\n        protected readonly apiKey: string;\n\n        protected constructor(...args: any[]) {\n            const [httpClient, apiKey]: [AxiosInstance, string] = args as any;\n\n            super(httpClient);\n\n            this.apiKey = apiKey;\n\n            if (!this.apiKey) {\n                throw new InvalidCredentialsException('Invalid or missing api key.');\n            }\n        }\n\n        static getMaxAccuracy(): AccuracyEnum {\n            return AccuracyEnum.HOUSE_NUMBER;\n        }\n\n        /**\n         * the top-level status code validation\n         * @link {https://developers.google.com/maps/documentation/geocoding/intro#StatusCodes}\n         */\n        protected async validateResponse(response: AxiosResponse): Promise<void> {\n            if (response.data.status === 'OK') {\n                return;\n            }\n\n            if (response.data.status === 'NOT_FOUND') {\n                throw new NotFoundException('Not found', response);\n            } else if (response.data.status === 'REQUEST_DENIED' && response.data.error_message === 'The provided API key is invalid.') {\n                throw new InvalidCredentialsException('API key is invalid', response);\n            } else if (response.data.status === 'REQUEST_DENIED') {\n                throw new InvalidServerResponseException('API key is invalid', response);\n            } else if (response.data.status === 'OVER_QUERY_LIMIT') {\n                throw new QuotaExceededException('Quota exceeded', response);\n            } else if (response.data.status === 'OVER_DAILY_LIMIT') {\n                /**\n                 * @link {https://developers.google.com/maps/faq#over-limit-key-error}\n                 */\n                throw new QuotaExceededException('Daily quota exceeded', response);\n            } else if (response.data.status === 'INVALID_REQUEST') {\n                throw new InvalidArgumentException('Invalid request', response);\n            } else if (response.data.status === 'UNKNOWN_ERROR') {\n                throw new InvalidServerResponseException('Unknown error', response);\n            } else if (response.data.status === 'ZERO_RESULTS') {\n                return;\n            }\n\n            throw new InvalidServerResponseException(`Unknown response status \"${response.data.status}\"`, response);\n        }\n    }\n\n    return GoogleMapsCommonCommand;\n}\n"]}