{"version":3,"file":"google-maps-reverse.command.js","sourceRoot":"","sources":["../../../../../src/provider/google-maps/command/google-maps-reverse.command.ts"],"names":[],"mappings":";;;AACA,8CAAkD;AAGlD,mCAAyD;AAEzD;;;GAGG;AACH,MAAa,wBAAyB,SAAQ,IAAA,sCAA8B,EAAC,wBAAc,CAAkC;IACzH,YAAY,UAAyB,EAAmB,MAAc;QAClE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAD0B,WAAM,GAAN,MAAM,CAAQ;IAEtE,CAAC;IAED,MAAM,CAAC,MAAM;QACT,OAAO,mDAAmD,CAAC;IAC/D,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,KAAmB;QAC1C,MAAM,aAAa,GAAoC;YACnD,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,MAAM,EAAE,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE;YACnC,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,MAAM,EAAE,KAAK;SAChB,CAAC;QAEF,IAAI,KAAK,CAAC,WAAW,EAAE;YACnB,aAAa,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;SAChE;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;CACJ;AAxBD,4DAwBC","sourcesContent":["import type { AxiosInstance } from 'axios';\nimport { ReverseCommand } from '../../../command';\nimport type { ReverseQuery } from '../../../model';\nimport type { GoogleMapsReverseQueryInterface } from '../interface';\nimport { GoogleMapsLocationCommandMixin } from './mixin';\n\n/**\n * TODO implement result_type and location_type\n * @link {https://developers.google.com/maps/documentation/geocoding/intro#ReverseGeocoding}\n */\nexport class GoogleMapsReverseCommand extends GoogleMapsLocationCommandMixin(ReverseCommand)<GoogleMapsReverseQueryInterface> {\n    constructor(httpClient: AxiosInstance, private readonly apiKey: string) {\n        super(httpClient, apiKey);\n    }\n\n    static getUrl(): string {\n        return 'https://maps.googleapis.com/maps/api/geocode/json';\n    }\n\n    protected async buildQuery(query: ReverseQuery): Promise<GoogleMapsReverseQueryInterface> {\n        const providerQuery: GoogleMapsReverseQueryInterface = {\n            key: this.apiKey,\n            latlng: `${query.lat},${query.lon}`,\n            limit: query.limit,\n            language: query.language,\n            sensor: false,\n        };\n\n        if (query.countryCode) {\n            providerQuery.region = `.${query.countryCode.toLowerCase()}`;\n        }\n\n        return providerQuery;\n    }\n}\n"]}