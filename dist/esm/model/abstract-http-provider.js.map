{"version":3,"file":"abstract-http-provider.js","sourceRoot":"","sources":["../../../src/model/abstract-http-provider.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,6BAA6B,EAAE,MAAM,cAAc,CAAC;AAU7D,OAAO,EAAE,gBAAgB,EAAE,MAAM,qBAAqB,CAAC;AAKvD,MAAM,OAAgB,oBAAqB,SAAQ,gBAAgB;IAC/D,YAAuC,QAAuC;QAC1E,KAAK,EAAE,CAAC;QAD2B,aAAQ,GAAR,QAAQ,CAA+B;IAE9E,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAA4B;QACtC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE;YACxB,MAAM,IAAI,6BAA6B,CAAC,YAAY,IAAI,CAAC,WAAW,CAAC,IAAI,mCAAmC,CAAC,CAAC;SACjH;QAED,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,KAAiC;QAChD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,EAAE;YAC7B,MAAM,IAAI,6BAA6B,CAAC,YAAY,IAAI,CAAC,WAAW,CAAC,IAAI,wCAAwC,CAAC,CAAC;SACtH;QAED,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,KAAK,CAAC,QAAQ,CAAC,KAA6B;QACxC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE;YACzB,MAAM,IAAI,6BAA6B,CAAC,YAAY,IAAI,CAAC,WAAW,CAAC,IAAI,oCAAoC,CAAC,CAAC;SAClH;QAED,OAAO,CAAC,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,SAAS,CAAC,MAAuB;QAC7B,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;QAExB,KAAK,MAAM,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YAChD,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;SAC7B;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ","sourcesContent":["import { UnsupportedOperationException } from '../exception';\nimport type {\n    DistanceQueryInterface,\n    GeocodeQueryInterface,\n    HttpProviderCommandsInterface,\n    PlaceDetailsQueryInterface,\n    ReverseQueryInterface,\n    SuggestQueryInterface,\n} from '../interface';\nimport type { LoggerInterface } from '../logger';\nimport { AbstractProvider } from './abstract-provider';\nimport type { Distance } from './distance';\nimport type { Location } from './location';\nimport type { Suggestion } from './suggestion';\n\nexport abstract class AbstractHttpProvider extends AbstractProvider {\n    protected constructor(private readonly commands: HttpProviderCommandsInterface) {\n        super();\n    }\n\n    async geocode(query: GeocodeQueryInterface): Promise<Location[]> {\n        return this.commands.geocode.execute(query);\n    }\n\n    async reverse(query: ReverseQueryInterface): Promise<Location[]> {\n        return this.commands.reverse.execute(query);\n    }\n\n    async suggest(query: SuggestQueryInterface): Promise<Suggestion[]> {\n        if (!this.commands.suggest) {\n            throw new UnsupportedOperationException(`Provider ${this.constructor.name} doesn't support \"suggest\" method`);\n        }\n\n        return this.commands.suggest.execute(query);\n    }\n\n    async placeDetails(query: PlaceDetailsQueryInterface): Promise<Location> {\n        if (!this.commands.placeDetails) {\n            throw new UnsupportedOperationException(`Provider ${this.constructor.name} doesn't support \"placeDetails\" method`);\n        }\n\n        return (await this.commands.placeDetails.execute(query))[0];\n    }\n\n    async distance(query: DistanceQueryInterface): Promise<Distance> {\n        if (!this.commands.distance) {\n            throw new UnsupportedOperationException(`Provider ${this.constructor.name} doesn't support \"distance\" method`);\n        }\n\n        return (await this.commands.distance.execute(query))[0];\n    }\n\n    setLogger(logger: LoggerInterface): this {\n        super.setLogger(logger);\n\n        for (const command of Object.values(this.commands)) {\n            command.setLogger(logger);\n        }\n\n        return this;\n    }\n}\n"]}