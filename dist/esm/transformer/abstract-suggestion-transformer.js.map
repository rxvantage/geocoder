{"version":3,"file":"abstract-suggestion-transformer.js","sourceRoot":"","sources":["../../../src/transformer/abstract-suggestion-transformer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,UAAU,EAAE,MAAM,UAAU,CAAC;AAGtC,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAE7D,MAAM,OAAgB,6BAGpB,SAAQ,mBAA4D;IAIlE,KAAK,CAAC,SAAS,CAAC,OAA+B;QAC3C,MAAM,UAAU,GAAe,IAAI,UAAU,EAAwB,CAAC;QAEtE,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QACpC,UAAU,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC/D,UAAU,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC7C,UAAU,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QAE1B,OAAO,eAAe,CAA8E,UAAU,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;IACzI,CAAC;CACJ","sourcesContent":["import { plainToInstance } from 'class-transformer';\nimport type { ClassTransformOptions } from 'class-transformer';\nimport { Suggestion } from '../model';\nimport type { SuggestionInterface } from '../interface';\nimport type { AbstractHttpProvider } from '../model';\nimport { AbstractTransformer } from './abstract-transformer';\n\nexport abstract class AbstractSuggestionTransformer<\n    HttpProviderClass extends AbstractHttpProvider = any,\n    ProviderRawEntryType = any,\n> extends AbstractTransformer<HttpProviderClass, ProviderRawEntryType> {\n    abstract getFormattedAddress(): Promise<SuggestionInterface['formattedAddress']>;\n    abstract getPlaceId(): Promise<SuggestionInterface['placeId']>;\n\n    async transform(options?: ClassTransformOptions): Promise<Suggestion<ProviderRawEntryType>> {\n        const suggestion: Suggestion = new Suggestion<ProviderRawEntryType>();\n\n        suggestion.provider = this.provider;\n        suggestion.formattedAddress = await this.getFormattedAddress();\n        suggestion.placeId = await this.getPlaceId();\n        suggestion.raw = this.raw;\n\n        return plainToInstance<Suggestion<ProviderRawEntryType>, SuggestionInterface<ProviderRawEntryType>>(Suggestion, suggestion, options);\n    }\n}\n"]}