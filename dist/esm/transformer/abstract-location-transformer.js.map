{"version":3,"file":"abstract-location-transformer.js","sourceRoot":"","sources":["../../../src/transformer/abstract-location-transformer.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAIpC,OAAO,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAE7D,MAAM,OAAgB,2BAA8G,SAAQ,mBAG3I;IAcG,KAAK,CAAC,SAAS,CAAC,OAA+B;QAC3C,MAAM,QAAQ,GAAa,IAAI,QAAQ,EAAwB,CAAC;QAEhE,QAAQ,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;QAClC,QAAQ,CAAC,gBAAgB,GAAG,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC7D,QAAQ,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/C,QAAQ,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC;QAC7C,QAAQ,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3C,QAAQ,CAAC,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QACnD,QAAQ,CAAC,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,EAAE,CAAC;QACvC,QAAQ,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QAC/C,QAAQ,CAAC,IAAI,GAAG,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACrC,QAAQ,CAAC,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QACjD,QAAQ,CAAC,WAAW,GAAG,MAAM,IAAI,CAAC,cAAc,EAAE,CAAC;QACnD,QAAQ,CAAC,UAAU,GAAG,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QACjD,QAAQ,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;QAC3C,QAAQ,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;QAExB,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE;YAC5B,QAAQ,CAAC,gBAAgB,GAAG,QAAQ,CAAC,wBAAwB,EAAE,CAAC;SACnE;QAED,OAAO,eAAe,CAA0E,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;IACjI,CAAC;IAES,KAAK,CAAC,eAAe,CAAC,KAAiC;QAC7D,OAAO,gBAAgB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,CAAC;CACJ","sourcesContent":["import { plainToInstance } from 'class-transformer';\nimport type { ClassTransformOptions } from 'class-transformer';\nimport { WorldCountryUtil } from '../util/world-country';\nimport { Location } from '../model';\nimport type { LocationInterface } from '../interface';\nimport type { AbstractHttpProvider } from '../model';\nimport type { WorldCountry, WorldCountryQueryInterface } from '../util/world-country';\nimport { AbstractTransformer } from './abstract-transformer';\n\nexport abstract class AbstractLocationTransformer<HttpProviderClass extends AbstractHttpProvider = any, ProviderRawEntryType = any> extends AbstractTransformer<\n    HttpProviderClass,\n    ProviderRawEntryType\n> {\n    abstract getFormattedAddress(): Promise<LocationInterface['formattedAddress']>;\n    abstract getLongitude(): Promise<LocationInterface['longitude']>;\n    abstract getLatitude(): Promise<LocationInterface['latitude']>;\n    abstract getCountry(): Promise<LocationInterface['country']>;\n    abstract getCountryCode(): Promise<LocationInterface['countryCode']>;\n    abstract getState(): Promise<LocationInterface['state']>;\n    abstract getStateCode(): Promise<LocationInterface['stateCode']>;\n    abstract getCity(): Promise<LocationInterface['city']>;\n    abstract getStreetName(): Promise<LocationInterface['streetName']>;\n    abstract getHouseNumber(): Promise<LocationInterface['houseNumber']>;\n    abstract getPostalCode(): Promise<LocationInterface['postalCode']>;\n    abstract getPlaceId(): Promise<LocationInterface['placeId']>;\n\n    async transform(options?: ClassTransformOptions): Promise<Location<ProviderRawEntryType>> {\n        const location: Location = new Location<ProviderRawEntryType>();\n\n        location.provider = this.provider;\n        location.formattedAddress = await this.getFormattedAddress();\n        location.longitude = await this.getLongitude();\n        location.latitude = await this.getLatitude();\n        location.country = await this.getCountry();\n        location.countryCode = await this.getCountryCode();\n        location.state = await this.getState();\n        location.stateCode = await this.getStateCode();\n        location.city = await this.getCity();\n        location.streetName = await this.getStreetName();\n        location.houseNumber = await this.getHouseNumber();\n        location.postalCode = await this.getPostalCode();\n        location.placeId = await this.getPlaceId();\n        location.raw = this.raw;\n\n        if (!location.formattedAddress) {\n            location.formattedAddress = location.generateFormattedAddress();\n        }\n\n        return plainToInstance<Location<ProviderRawEntryType>, LocationInterface<ProviderRawEntryType>>(Location, location, options);\n    }\n\n    protected async getWorldCountry(query: WorldCountryQueryInterface): Promise<WorldCountry | undefined> {\n        return WorldCountryUtil.find(query);\n    }\n}\n"]}