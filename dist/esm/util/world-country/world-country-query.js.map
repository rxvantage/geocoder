{"version":3,"file":"world-country-query.js","sourceRoot":"","sources":["../../../../src/util/world-country/world-country-query.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAI7F,IAAM,iBAAiB,GAAvB,MAAM,iBAAiB;CAgC7B,CAAA;AA/BG;IAAC,QAAQ,EAAE;IACV,UAAU,EAAE;IACZ,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,EAAE,CAAC;IACvC,MAAM,EAAE;;+CACK;AAEd;IAAC,UAAU,EAAE;IACZ,QAAQ,EAAE;IACV,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,GAAG,IAAI,GAAG,WAAW,EAAE,CAAC;IAChE,MAAM,EAAE;;+CACK;AAEd;IAAC,UAAU,EAAE;IACZ,QAAQ,EAAE;IACV,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,GAAG,IAAI,GAAG,WAAW,EAAE,CAAC;IAChE,MAAM,EAAE;;+CACK;AAEd;IAAC,UAAU,EAAE;IACZ,KAAK,EAAE;IACP,cAAc,EAAE;IAChB,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,CAAC;IACZ,SAAS,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IAC3F,MAAM,EAAE;;+CACc;AA/Bd,iBAAiB;IAD7B,OAAO,EAAE;GACG,iBAAiB,CAgC7B;SAhCY,iBAAiB","sourcesContent":["import { Exclude, Expose, Transform } from 'class-transformer';\nimport { IsInt, IsNumberString, IsOptional, IsString, MaxLength, MinLength } from 'class-validator';\nimport type { WorldCountryQueryInterface } from './world-country-query.interface';\n\n@Exclude()\nexport class WorldCountryQuery implements WorldCountryQueryInterface {\n    @IsString()\n    @IsOptional()\n    @MinLength(1)\n    @Transform(({ value }) => value?.trim())\n    @Expose()\n    name?: string;\n\n    @IsOptional()\n    @IsString()\n    @MinLength(2)\n    @MaxLength(2)\n    @Transform(({ value }) => value?.toString().trim().toUpperCase())\n    @Expose()\n    cca2?: string;\n\n    @IsOptional()\n    @IsString()\n    @MinLength(3)\n    @MaxLength(3)\n    @Transform(({ value }) => value?.toString().trim().toUpperCase())\n    @Expose()\n    cca3?: string;\n\n    @IsOptional()\n    @IsInt()\n    @IsNumberString()\n    @MinLength(3)\n    @MaxLength(3)\n    @Transform(({ value }) => (value ? (+value).toString().trim().padStart(3, '0') : undefined))\n    @Expose()\n    ccn3?: string | number;\n}\n"]}