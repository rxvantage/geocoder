{"version":3,"file":"abstract-suggest.command.js","sourceRoot":"","sources":["../../../src/command/abstract-suggest.command.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AAErD,MAAM,OAAgB,sBAIpB,SAAQ,eAAwH;IACpH,KAAK,CAAC,aAAa,CAAC,SAA8C,EAAE,MAAyB;QACnG,MAAM,IAAI,KAAK,CAAC,uDAAuD,CAAC,CAAC;IAC7E,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,KAAwB;QAClC,MAAM,WAAW,GAAiB,MAAM,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAE7D,IAAI,KAAK,CAAC,KAAK,IAAI,WAAW,CAAC,MAAM,GAAG,KAAK,CAAC,KAAK,EAAE;YACjD,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SAC5C;QAED,OAAO,WAAW,CAAC;IACvB,CAAC;CACJ","sourcesContent":["import type { AxiosResponse } from 'axios';\nimport type { QueryInterface } from '../interface';\nimport type { Suggestion } from '../model';\nimport type { AbstractSuggestionTransformer } from '../transformer';\nimport { AbstractCommand } from './abstract.command';\n\nexport abstract class AbstractSuggestCommand<\n    GeocoderQueryType extends QueryInterface = any,\n    ProviderRequestType = any,\n    ProviderResponseType = any,\n> extends AbstractCommand<GeocoderQueryType, Suggestion, AbstractSuggestionTransformer, ProviderRequestType, ProviderResponseType> {\n    protected async parseResponse(_response: AxiosResponse<ProviderResponseType>, _query: GeocoderQueryType): Promise<AbstractSuggestionTransformer[]> {\n        throw new Error('AbstractSuggestCommand.parseResponse: not implemented');\n    }\n\n    async execute(query: GeocoderQueryType): Promise<Suggestion[]> {\n        const suggestions: Suggestion[] = await super.execute(query);\n\n        if (query.limit && suggestions.length > query.limit) {\n            return suggestions.slice(0, query.limit);\n        }\n\n        return suggestions;\n    }\n}\n"]}