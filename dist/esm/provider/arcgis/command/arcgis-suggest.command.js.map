{"version":3,"file":"arcgis-suggest.command.js","sourceRoot":"","sources":["../../../../../src/provider/arcgis/command/arcgis-suggest.command.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport { ArcgisSuggestionTransformer } from '../transformer';\nimport { WorldCountryUtil } from '../../../util/world-country';\nimport { AccuracyEnum } from '../../../model';\nimport { SuggestCommand } from '../../../command';\nimport type { SuggestQuery } from '../../../model';\nimport type { AbstractSuggestionTransformer } from '../../../transformer';\nimport type { WorldCountry } from '../../../util/world-country';\nimport type { ArcgisProvider } from '../arcgis.provider';\nimport type { ArcgisSuggestionInterface, ArcgisSuggestQueryInterface, ArcgisSuggestResponseInterface } from '../interface';\nimport { ArcgisCommonCommandMixin } from './mixin';\n\n/**\n * @link {https://developers.arcgis.com/rest/geocode/api-reference/geocoding-suggest.htm}\n */\nexport class ArcgisSuggestCommand extends ArcgisCommonCommandMixin(SuggestCommand)<ArcgisSuggestQueryInterface, ArcgisSuggestResponseInterface> {\n    constructor(httpClient: AxiosInstance, private readonly token?: string) {\n        super(httpClient);\n    }\n\n    static getUrl(): string {\n        return 'https://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/suggest';\n    }\n\n    protected async buildQuery(query: SuggestQuery): Promise<ArcgisSuggestQueryInterface> {\n        const categories: string[] = this.getCategoriesByAccuracy(query.accuracy);\n\n        if (!query.countryCode && query.country) {\n            const country: WorldCountry | undefined = await WorldCountryUtil.find({\n                name: query.country,\n            });\n\n            if (country) {\n                query.countryCode = country.cca2;\n            }\n        }\n\n        const providerQuery: ArcgisSuggestQueryInterface = {\n            token: this.token,\n            forStorage: !!this.token,\n            text: query.address,\n            countryCode: query.countryCode,\n            maxSuggestions: query.limit,\n            langCode: query.language,\n            category: categories.join(','),\n            isCollection: false,\n            f: 'json',\n        };\n\n        if (query.lat && query.lon) {\n            providerQuery.location = `${query.lon},${query.lat}`;\n        }\n\n        return providerQuery;\n    }\n\n    protected async parseResponse(\n        response: AxiosResponse<ArcgisSuggestResponseInterface>,\n    ): Promise<AbstractSuggestionTransformer<ArcgisProvider, ArcgisSuggestionInterface>[]> {\n        if (!Array.isArray(response.data.suggestions)) {\n            return [];\n        }\n\n        return Promise.all<AbstractSuggestionTransformer<ArcgisProvider, ArcgisSuggestionInterface>>(\n            response.data.suggestions.map(\n                async (suggestion: ArcgisSuggestionInterface): Promise<AbstractSuggestionTransformer<ArcgisProvider, ArcgisSuggestionInterface>> =>\n                    new ArcgisSuggestionTransformer(suggestion),\n            ),\n        );\n    }\n\n    private getCategoriesByAccuracy(accuracy?: AccuracyEnum): string[] {\n        const categories: string[] = [];\n\n        if (!accuracy) {\n            return categories;\n        }\n\n        switch (accuracy) {\n            case AccuracyEnum.HOUSE_NUMBER:\n                categories.push('Point Address');\n                break;\n            case AccuracyEnum.STREET_NAME:\n                categories.push('Point Address', 'Street Address', 'Street Name');\n                break;\n            case AccuracyEnum.CITY:\n                categories.push('Point Address', 'Street Address', 'Street Name', 'City');\n                break;\n            case AccuracyEnum.STATE:\n                categories.push('Point Address', 'Street Address', 'Street Name', 'City', 'Subregion', 'Region');\n                break;\n            case AccuracyEnum.COUNTRY:\n                categories.push('Point Address', 'Street Address', 'Street Name', 'City', 'Subregion', 'Region', 'Territory', 'Country');\n                break;\n        }\n\n        return categories;\n    }\n}\n"]}