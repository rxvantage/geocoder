{"version":3,"file":"map-quest-suggest.command.js","sourceRoot":"","sources":["../../../../../src/provider/map-quest/command/map-quest-suggest.command.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,6BAA6B,EAAE,MAAM,gBAAgB,CAAC;AAC/D,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAKlD,OAAO,EAAE,0BAA0B,EAAE,MAAM,SAAS,CAAC;AAErD;;GAEG;AACH,MAAM,OAAO,sBAAuB,SAAQ,0BAA0B,CAAC,cAAc,CAAgC;IACjH,YAAY,UAAyB,EAAmB,MAAc;QAClE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAD0B,WAAM,GAAN,MAAM,CAAQ;IAEtE,CAAC;IAED,MAAM,CAAC,MAAM;QACT,OAAO,kDAAkD,CAAC;IAC9D,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,KAAmB;QAC1C,MAAM,aAAa,GAAkC;YACjD,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,CAAC,EAAE,KAAK,CAAC,OAAO;YAChB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,UAAU,EAAE,SAAS;YACrB,WAAW,EAAE,KAAK,CAAC,WAAW;YAC9B,YAAY,EAAE,KAAK,CAAC,QAAQ;SAC/B,CAAC;QAEF,IAAI,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE;YACxB,aAAa,CAAC,QAAQ,GAAG,GAAG,KAAK,CAAC,GAAG,IAAI,KAAK,CAAC,GAAG,EAAE,CAAC;SACxD;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAES,KAAK,CAAC,aAAa,CAAC,QAAuB;QACjD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACxE,OAAO,EAAE,CAAC;SACb;QAED,MAAM,SAAS,GAAU,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YAChD,OAAO,EAAE,CAAC;SACb;QAED,OAAO,OAAO,CAAC,GAAG,CACd,SAAS,CAAC,GAAG,CAAC,KAAK,EAAE,GAAQ,EAA4D,EAAE,CAAC,IAAI,6BAA6B,CAAC,GAAG,CAAC,CAAC,CACtI,CAAC;IACN,CAAC;CACJ","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport { MapQuestSuggestionTransformer } from '../transformer';\nimport { SuggestCommand } from '../../../command';\nimport type { SuggestQuery } from '../../../model';\nimport type { AbstractSuggestionTransformer } from '../../../transformer';\nimport type { MapQuestSuggestQueryInterface } from '../interface';\nimport type { MapQuestProvider } from '../map-quest.provider';\nimport { MapQuestCommonCommandMixin } from './mixin';\n\n/**\n * @link {https://developer.mapquest.com/documentation/searchahead-api/}\n */\nexport class MapQuestSuggestCommand extends MapQuestCommonCommandMixin(SuggestCommand)<MapQuestSuggestQueryInterface> {\n    constructor(httpClient: AxiosInstance, private readonly apiKey: string) {\n        super(httpClient, apiKey);\n    }\n\n    static getUrl(): string {\n        return 'https://www.mapquestapi.com/search/v3/prediction';\n    }\n\n    protected async buildQuery(query: SuggestQuery): Promise<MapQuestSuggestQueryInterface> {\n        const providerQuery: MapQuestSuggestQueryInterface = {\n            key: this.apiKey,\n            q: query.address,\n            limit: query.limit,\n            collection: 'address',\n            countryCode: query.countryCode,\n            languageCode: query.language,\n        };\n\n        if (query.lat && query.lon) {\n            providerQuery.location = `${query.lon},${query.lat}`;\n        }\n\n        return providerQuery;\n    }\n\n    protected async parseResponse(response: AxiosResponse): Promise<AbstractSuggestionTransformer<MapQuestProvider>[]> {\n        if (!Array.isArray(response.data.results) || !response.data.results.length) {\n            return [];\n        }\n\n        const locations: any[] = response.data.results;\n        if (!Array.isArray(locations) || !locations.length) {\n            return [];\n        }\n\n        return Promise.all<AbstractSuggestionTransformer<MapQuestProvider>>(\n            locations.map(async (raw: any): Promise<AbstractSuggestionTransformer<MapQuestProvider>> => new MapQuestSuggestionTransformer(raw)),\n        );\n    }\n}\n"]}