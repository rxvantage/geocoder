{"version":3,"file":"map-quest-common-command.mixin.js","sourceRoot":"","sources":["../../../../../../src/provider/map-quest/command/mixin/map-quest-common-command.mixin.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport { InvalidCredentialsException, UnsupportedAccuracyException } from '../../../../exception';\nimport { AccuracyEnum } from '../../../../model';\nimport { sliceFrom } from '../../../../util';\nimport { MapQuestLocationTransformer } from '../../transformer';\nimport type { AbstractCommand } from '../../../../command';\nimport type { QueryInterface } from '../../../../interface';\nimport type { AbstractLocationTransformer } from '../../../../transformer';\nimport type { Constructor } from '../../../../types';\nimport type { MapQuestProvider } from '../../map-quest.provider';\n\nexport enum MapQuestLocationQualityEnum {\n    COUNTRY = 'COUNTRY',\n    ZIP = 'ZIP',\n    ZIP_EXTENDED = 'ZIP_EXTENDED',\n    STATE = 'STATE',\n    COUNTY = 'COUNTY',\n    CITY = 'CITY',\n    NEIGHBORHOOD = 'NEIGHBORHOOD',\n    STREET = 'STREET',\n    ADDRESS = 'ADDRESS',\n    POINT = 'POINT',\n}\n\nexport function MapQuestCommonCommandMixin<TBase extends Constructor<AbstractCommand>>(Base: TBase): TBase {\n    abstract class MapQuestCommonCommand extends Base {\n        protected readonly apiKey: any;\n\n        protected constructor(...args: any[]) {\n            const [httpClient, apiKey]: [AxiosInstance, string] = args as any;\n\n            super(httpClient);\n\n            this.apiKey = apiKey;\n\n            if (!this.apiKey) {\n                throw new InvalidCredentialsException('Invalid or missing api key.');\n            }\n        }\n\n        protected async validateResponse(_response: AxiosResponse): Promise<void> {\n            //\n        }\n\n        static getMaxAccuracy(): AccuracyEnum {\n            return AccuracyEnum.STREET_NAME;\n        }\n\n        protected async parseResponse(response: AxiosResponse, query: QueryInterface): Promise<AbstractLocationTransformer<MapQuestProvider>[]> {\n            if (!Array.isArray(response.data.results) || !response.data.results.length) {\n                return [];\n            }\n\n            const locations: any[] = response.data.results[0].locations.filter((raw: any) => this.accuracyFilter(raw, query.accuracy));\n            if (!Array.isArray(locations) || !locations.length) {\n                return [];\n            }\n\n            return Promise.all<AbstractLocationTransformer<MapQuestProvider>>(\n                locations.map(async (raw: any): Promise<AbstractLocationTransformer<MapQuestProvider>> => new MapQuestLocationTransformer(raw)),\n            );\n        }\n\n        private accuracyFilter(raw: any, accuracy?: AccuracyEnum): boolean {\n            if (!accuracy) {\n                return true;\n            }\n\n            switch (accuracy) {\n                // should never happen, as there is validation before\n                // case AccuracyEnum.HOUSE_NUMBER:\n                //     return this.isQualityAppropriate(MapQuestLocationQualityEnum.POINT, location.geocodeQuality);\n                case AccuracyEnum.STREET_NAME:\n                    return this.isQualityAppropriate(MapQuestLocationQualityEnum.STREET, raw.geocodeQuality);\n                case AccuracyEnum.CITY:\n                    return this.isQualityAppropriate(MapQuestLocationQualityEnum.CITY, raw.geocodeQuality);\n                case AccuracyEnum.STATE:\n                    return this.isQualityAppropriate(MapQuestLocationQualityEnum.STATE, raw.geocodeQuality);\n                case AccuracyEnum.COUNTRY:\n                    return this.isQualityAppropriate(MapQuestLocationQualityEnum.COUNTRY, raw.geocodeQuality);\n            }\n\n            // should never happen, as there is validation before\n            throw new UnsupportedAccuracyException(`Unsupported \"${accuracy}\" accuracy.`);\n        }\n\n        private isQualityAppropriate(sliceToQuality: MapQuestLocationQualityEnum, locationQuality: string): boolean {\n            return sliceFrom(Object.values(MapQuestLocationQualityEnum), sliceToQuality).includes(locationQuality);\n        }\n    }\n\n    return MapQuestCommonCommand;\n}\n"]}