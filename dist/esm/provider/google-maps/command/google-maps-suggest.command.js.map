{"version":3,"file":"google-maps-suggest.command.js","sourceRoot":"","sources":["../../../../../src/provider/google-maps/command/google-maps-suggest.command.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport { GoogleMapsSuggestionTransformer } from '../transformer';\nimport { AccuracyEnum } from '../../../model';\nimport { SuggestCommand } from '../../../command';\nimport type { SuggestQueryInterface } from '../../../interface';\nimport type { SuggestQuery } from '../../../model';\nimport type { AbstractSuggestionTransformer } from '../../../transformer';\nimport type { GoogleMapsProvider } from '../google-maps.provider';\nimport type { GoogleMapsSuggestQueryInterface } from '../interface';\nimport { GoogleMapsCommonCommandMixin } from './mixin';\n\n/**\n * @link {https://developers.google.com/places/web-service/autocomplete#place_autocomplete_requests}\n */\nexport class GoogleMapsSuggestCommand extends GoogleMapsCommonCommandMixin(SuggestCommand)<GoogleMapsSuggestQueryInterface> {\n    constructor(httpClient: AxiosInstance, private readonly apiKey: string) {\n        super(httpClient, apiKey);\n    }\n\n    static getUrl(): string {\n        return 'https://maps.googleapis.com/maps/api/place/autocomplete/json';\n    }\n\n    protected async buildQuery(query: SuggestQuery): Promise<GoogleMapsSuggestQueryInterface> {\n        /**\n         * @link {https://developers.google.com/places/web-service/autocomplete#place_types}\n         */\n        const components: Map<string, string> = new Map();\n\n        const country: string | undefined = query.countryCode || query.country;\n        if (country) {\n            components.set('country', country);\n        }\n\n        const providerQuery: GoogleMapsSuggestQueryInterface = {\n            key: this.apiKey,\n            input: query.address,\n            components: [...components].map<string>((value: [string, string]) => `${value[0]}:${value[1]}`).join('|'),\n            language: query.language,\n            types: this.getRequestTypeByAccuracy(query.accuracy),\n            sensor: false,\n        };\n\n        if (query.countryCode) {\n            providerQuery.region = `.${query.countryCode.toLowerCase()}`;\n        }\n\n        if (query.lat && query.lon) {\n            providerQuery.location = `${query.lat},${query.lon}`;\n\n            if (query.radius) {\n                providerQuery.radius = query.radius;\n                providerQuery.strictbounds = true;\n            }\n        }\n\n        return providerQuery;\n    }\n\n    protected async parseResponse(response: AxiosResponse, query: SuggestQueryInterface): Promise<AbstractSuggestionTransformer<GoogleMapsProvider>[]> {\n        if (!Array.isArray(response.data.predictions) || !response.data.predictions.length) {\n            return [];\n        }\n\n        let results: any[] = response.data.predictions;\n\n        results = results.filter((raw: any) => this.filterByAccuracy(raw, query.accuracy));\n        if (!results.length) {\n            return [];\n        }\n\n        return Promise.all<AbstractSuggestionTransformer<GoogleMapsProvider>>(\n            results.map(async (raw: any): Promise<AbstractSuggestionTransformer<GoogleMapsProvider>> => new GoogleMapsSuggestionTransformer(raw)),\n        );\n    }\n\n    private getRequestTypeByAccuracy(accuracy?: AccuracyEnum): GoogleMapsSuggestQueryInterface['types'] {\n        switch (accuracy) {\n            case AccuracyEnum.HOUSE_NUMBER:\n                return 'address';\n            case AccuracyEnum.STREET_NAME:\n                return 'geocode';\n            case AccuracyEnum.CITY:\n                return '(cities)';\n            case AccuracyEnum.STATE:\n            case AccuracyEnum.COUNTRY:\n                return '(regions)';\n            default:\n                return '';\n        }\n    }\n\n    /**\n     * Mapping between google location types and our\n     */\n    private filterByAccuracy({ types }: { types: string[] }, accuracy?: AccuracyEnum): boolean {\n        if (!accuracy) {\n            return true;\n        }\n\n        switch (accuracy) {\n            case AccuracyEnum.HOUSE_NUMBER:\n                return types.includes('street_address') || types.includes('premise');\n            case AccuracyEnum.STREET_NAME:\n                return types.includes('route');\n            case AccuracyEnum.CITY:\n                // @todo check sublocality ?\n                return types.includes('locality');\n            case AccuracyEnum.STATE:\n                return types.includes('administrative_area_level_1');\n            case AccuracyEnum.COUNTRY:\n                return types.includes('country');\n        }\n\n        return false;\n    }\n}\n"]}