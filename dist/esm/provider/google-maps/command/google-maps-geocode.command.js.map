{"version":3,"file":"google-maps-geocode.command.js","sourceRoot":"","sources":["../../../../../src/provider/google-maps/command/google-maps-geocode.command.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,cAAc,EAAE,MAAM,kBAAkB,CAAC;AAGlD,OAAO,EAAE,8BAA8B,EAAE,MAAM,SAAS,CAAC;AAEzD;;GAEG;AACH,MAAM,OAAO,wBAAyB,SAAQ,8BAA8B,CAAC,cAAc,CAAkC;IACzH,YAAY,UAAyB,EAAmB,MAAc;QAClE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAD0B,WAAM,GAAN,MAAM,CAAQ;IAEtE,CAAC;IAED,MAAM,CAAC,MAAM;QACT,OAAO,mDAAmD,CAAC;IAC/D,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,KAAmB;QAC1C,MAAM,UAAU,GAAwB,IAAI,GAAG,EAAE,CAAC;QAElD,IAAI,KAAK,CAAC,UAAU,EAAE;YAClB,UAAU,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC;SACnD;QAED,MAAM,OAAO,GAAuB,KAAK,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC;QACvE,IAAI,OAAO,EAAE;YACT,UAAU,CAAC,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;SACtC;QAED,MAAM,KAAK,GAAuB,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC;QACjE,IAAI,KAAK,EAAE;YACP,UAAU,CAAC,GAAG,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;SAChD;QAED,MAAM,aAAa,GAAoC;YACnD,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,UAAU,EAAE,CAAC,GAAG,UAAU,CAAC,CAAC,GAAG,CAAS,CAAC,KAAuB,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YACzG,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,KAAK,EAAE,KAAK,CAAC,KAAK;YAClB,MAAM,EAAE,KAAK;SAChB,CAAC;QAEF,IAAI,KAAK,CAAC,WAAW,EAAE;YACnB,aAAa,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;SAChE;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;CACJ","sourcesContent":["import type { AxiosInstance } from 'axios';\nimport { GeocodeCommand } from '../../../command';\nimport type { GeocodeQuery } from '../../../model';\nimport type { GoogleMapsGeocodeQueryInterface } from '../interface';\nimport { GoogleMapsLocationCommandMixin } from './mixin';\n\n/**\n * @link {https://developers.google.com/maps/documentation/geocoding/intro#GeocodingRequests}\n */\nexport class GoogleMapsGeocodeCommand extends GoogleMapsLocationCommandMixin(GeocodeCommand)<GoogleMapsGeocodeQueryInterface> {\n    constructor(httpClient: AxiosInstance, private readonly apiKey: string) {\n        super(httpClient, apiKey);\n    }\n\n    static getUrl(): string {\n        return 'https://maps.googleapis.com/maps/api/geocode/json';\n    }\n\n    protected async buildQuery(query: GeocodeQuery): Promise<GoogleMapsGeocodeQueryInterface> {\n        const components: Map<string, string> = new Map();\n\n        if (query.postalCode) {\n            components.set('postal_code', query.postalCode);\n        }\n\n        const country: string | undefined = query.countryCode || query.country;\n        if (country) {\n            components.set('country', country);\n        }\n\n        const state: string | undefined = query.stateCode || query.state;\n        if (state) {\n            components.set('administrative_area', state);\n        }\n\n        const providerQuery: GoogleMapsGeocodeQueryInterface = {\n            key: this.apiKey,\n            address: query.address,\n            components: [...components].map<string>((value: [string, string]) => `${value[0]}:${value[1]}`).join('|'),\n            language: query.language,\n            limit: query.limit,\n            sensor: false,\n        };\n\n        if (query.countryCode) {\n            providerQuery.region = `.${query.countryCode.toLowerCase()}`;\n        }\n\n        return providerQuery;\n    }\n}\n"]}