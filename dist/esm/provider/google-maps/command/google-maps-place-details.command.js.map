{"version":3,"file":"google-maps-place-details.command.js","sourceRoot":"","sources":["../../../../../src/provider/google-maps/command/google-maps-place-details.command.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAIvD,OAAO,EAAE,8BAA8B,EAAE,MAAM,SAAS,CAAC;AAEzD;;GAEG;AACH,MAAM,OAAO,6BAA8B,SAAQ,8BAA8B,CAAC,mBAAmB,CAAuC;IACxI,YAAY,UAAyB,EAAmB,MAAc;QAClE,KAAK,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAD0B,WAAM,GAAN,MAAM,CAAQ;IAEtE,CAAC;IAED,MAAM,CAAC,MAAM;QACT,OAAO,yDAAyD,CAAC;IACrE,CAAC;IAES,KAAK,CAAC,UAAU,CAAC,KAAwB;QAC/C,MAAM,aAAa,GAAyC;YACxD,GAAG,EAAE,IAAI,CAAC,MAAM;YAChB,OAAO,EAAE,KAAK,CAAC,OAAO;YACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ;YACxB,MAAM,EAAE,KAAK;YACb;;;eAGG;YACH,MAAM,EAAE,4DAA4D;SACvE,CAAC;QAEF,IAAI,KAAK,CAAC,WAAW,EAAE;YACnB,aAAa,CAAC,MAAM,GAAG,IAAI,KAAK,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,CAAC;SAChE;QAED,OAAO,aAAa,CAAC;IACzB,CAAC;IAES,KAAK,CAAC,aAAa,CAAC,QAAuB;QACjD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE;YACvB,OAAO,EAAE,CAAC;SACb;QAED,OAAO,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAC7D,CAAC;CACJ","sourcesContent":["import type { AxiosInstance, AxiosResponse } from 'axios';\nimport { PlaceDetailsCommand } from '../../../command';\nimport type { PlaceDetailsQuery } from '../../../model';\nimport type { GoogleMapsPlaceDetailsQueryInterface } from '../interface';\nimport type { GoogleMapsLocationTransformer } from '../transformer';\nimport { GoogleMapsLocationCommandMixin } from './mixin';\n\n/**\n * @link {https://developers.google.com/places/web-service/details}\n */\nexport class GoogleMapsPlaceDetailsCommand extends GoogleMapsLocationCommandMixin(PlaceDetailsCommand)<GoogleMapsPlaceDetailsQueryInterface> {\n    constructor(httpClient: AxiosInstance, private readonly apiKey: string) {\n        super(httpClient, apiKey);\n    }\n\n    static getUrl(): string {\n        return 'https://maps.googleapis.com/maps/api/place/details/json';\n    }\n\n    protected async buildQuery(query: PlaceDetailsQuery): Promise<GoogleMapsPlaceDetailsQueryInterface> {\n        const providerQuery: GoogleMapsPlaceDetailsQueryInterface = {\n            key: this.apiKey,\n            placeid: query.placeId,\n            language: query.language,\n            sensor: false,\n            /**\n             * @see interface\n             * used basic fields\n             */\n            fields: 'address_component,formatted_address,geometry,place_id,type',\n        };\n\n        if (query.countryCode) {\n            providerQuery.region = `.${query.countryCode.toLowerCase()}`;\n        }\n\n        return providerQuery;\n    }\n\n    protected async parseResponse(response: AxiosResponse): Promise<GoogleMapsLocationTransformer[]> {\n        if (!response.data.result) {\n            return [];\n        }\n\n        return [await this.parseOneResult(response.data.result)];\n    }\n}\n"]}