{"version":3,"file":"google-maps-location-command.mixin.js","sourceRoot":"","sources":["../../../../../../src/provider/google-maps/command/mixin/google-maps-location-command.mixin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,6BAA6B,EAAE,MAAM,mBAAmB,CAAC;AAKlE,OAAO,EAAE,4BAA4B,EAAE,MAAM,oCAAoC,CAAC;AAElF,MAAM,UAAU,8BAA8B,CAA6C,IAAW;IAClG,MAAe,yBAA0B,SAAQ,4BAA4B,CAAC,IAAI,CAAC;QACrE,KAAK,CAAC,aAAa,CAAC,QAAuB;YACjD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACxE,OAAO,EAAE,CAAC;aACb;YAED,OAAO,OAAO,CAAC,GAAG,CACd,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,GAAQ,EAA4D,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CACpI,CAAC;QACN,CAAC;QAES,KAAK,CAAC,cAAc,CAAC,GAAQ;YACnC,OAAO,IAAI,6BAA6B,CAAC,GAAG,CAAC,CAAC;QAClD,CAAC;KACJ;IAED,OAAO,yBAAyB,CAAC;AACrC,CAAC","sourcesContent":["import type { AxiosResponse } from 'axios';\nimport { GoogleMapsLocationTransformer } from '../../transformer';\nimport type { AbstractCommand } from '../../../../command';\nimport type { AbstractLocationTransformer } from '../../../../transformer';\nimport type { Constructor } from '../../../../types';\nimport type { GoogleMapsProvider } from '../../google-maps.provider';\nimport { GoogleMapsCommonCommandMixin } from './google-maps-common-command.mixin';\n\nexport function GoogleMapsLocationCommandMixin<TBase extends Constructor<AbstractCommand>>(Base: TBase): TBase {\n    abstract class GoogleMapsLocationCommand extends GoogleMapsCommonCommandMixin(Base) {\n        protected async parseResponse(response: AxiosResponse): Promise<AbstractLocationTransformer<GoogleMapsProvider>[]> {\n            if (!Array.isArray(response.data.results) || !response.data.results.length) {\n                return [];\n            }\n\n            return Promise.all<AbstractLocationTransformer<GoogleMapsProvider>>(\n                response.data.results.map(async (raw: any): Promise<AbstractLocationTransformer<GoogleMapsProvider>> => this.parseOneResult(raw)),\n            );\n        }\n\n        protected async parseOneResult(raw: any): Promise<AbstractLocationTransformer<GoogleMapsProvider>> {\n            return new GoogleMapsLocationTransformer(raw);\n        }\n    }\n\n    return GoogleMapsLocationCommand;\n}\n"]}