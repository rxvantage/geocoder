{"version":3,"file":"query.interface.js","sourceRoot":"","sources":["../../../src/interface/query.interface.ts"],"names":[],"mappings":"","sourcesContent":["import type { AccuracyEnum } from '../model';\n\nexport interface QueryInterface {\n    /**\n     * @important Provider classes MUST implement this option, if api provider supports it.\n     * @important Additionally, the logic for this option is executed after the data is received and returned from the provider class.\n     *\n     * If you want to get a result that contains values in all the fields you need, then specify the minimum level of accuracy.\n     * @example If you have enough general information, such as: country, state and city, then specify the value `AccuracyEnum.CITY`\n     * @example If you want to get the result only if the data contains all the information, up to the house number, specify the AccuracyEnum.HOUSE_NUMBER.\n     *\n     * @default not applicable\n     */\n    accuracy?: AccuracyEnum;\n\n    /**\n     * @important Provider classes MUST implement this option, if api provider supports it.\n     * ISO 3166-1 alpha-2\n     *\n     * @default not applicable\n     */\n    countryCode?: string;\n\n    /**\n     * @important This option should not passed to the provider request.\n     * @important Additionally, the logic for this option is executed after the data is received and returned from the provider class.\n     *\n     * @default {Query.DEFAULT_RESULT_LIMIT}\n     */\n    limit?: number;\n\n    /**\n     * @important Provider classes MUST implement this option, if api provider supports it.\n     * @important Additionally, the logic for this option is executed after the data is received and returned from the provider class and filtered by accuracy.\n     *\n     * @default {Query.DEFAULT_RESULT_LANGUAGE}\n     */\n    language?: string;\n\n    /**\n     * This option will be useful to those who want to get additional data that the library cannot provide with a common interface.\n     *\n     * If true - AbstractTransformer additionally returns result with the original provider data in the `raw` property\n     *\n     * @default false\n     */\n    withRaw?: boolean;\n\n    /**\n     * TODO not implemented\n     *\n     * Auto fill undefined optional query properties countryCode and stateCode using other optional properties: country, countryCode\n     * @example You provide country\n     * The library will search for countryCode by country name.\n     * If it finds a match, it will substitute the value for countryCode in the current query\n     *\n     * @example You provide country/countryCode and state\n     * The library will search stateCode by country/countryCode and state name.\n     * If it finds a match, substitute the stateCode value in the current request.\n     *\n     * @default true\n     */\n    fillMissingQueryProperties?: boolean;\n}\n"]}